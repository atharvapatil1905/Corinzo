# Cardiovascular Disease Prediction
A beginner-level machine learning project.


import pandas as pd

df = pd.read_csv("cardio_train.csv", sep=";", index_col=0)
data = df.copy()
data["age"] = (data["age"] / 365).round().astype(int)
data = data.drop_duplicates()
data = data[(data["ap_hi"] >= 70) & (data["ap_hi"] <= 250)]
data = data[(data["ap_lo"] >= 40) & (data["ap_lo"] <= 200)]
print("Cleaned dataset shape:", data.shape)


# EDA Cell


import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x="cardio", data=data)
plt.title("Target Distribution")
plt.show()

sns.histplot(data["age"], bins=20, kde=True)
plt.title("Age Distribution")
plt.show()

sns.boxplot(x="cardio", y="ap_hi", data=data)
plt.title("Systolic BP by Cardio Outcome")
plt.show()

sns.countplot(x="cholesterol", hue="cardio", data=data)
plt.title("Cholesterol vs Cardio")
plt.show()

plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()


# Model training


from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

X = data.drop("cardio", axis=1)
y = data["cardio"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

models = {
    "Logistic Regression": LogisticRegression(),
    "KNN": KNeighborsClassifier(),
    "SVM": SVC(),
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier()
}

accuracy_scores = {}
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    acc = accuracy_score(y_test, y_pred)
    accuracy_scores[name] = acc
    print(f"{name} Accuracy: {acc:.2f}")



# Plot Comparison

plt.figure(figsize=(8, 5))
plt.bar(accuracy_scores.keys(), accuracy_scores.values(), color='skyblue')
plt.title("Model Accuracy Comparison")
plt.ylabel("Accuracy")
plt.ylim(0.5, 1.0)
plt.xticks(rotation=15)
plt.grid(axis='y')
plt.show()



